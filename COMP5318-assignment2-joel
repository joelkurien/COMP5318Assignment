{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "fc4122b0",
   "metadata": {},
   "source": [
    "# COMP4318/5318 Assignment 2: Image Classification"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "af9f508e",
   "metadata": {},
   "source": [
    "### Group number: ...  , SID1: ... , SID2: ..., SID3: ... "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e24652d1",
   "metadata": {},
   "source": [
    "This template notebook includes code to load the  dataset and a skeleton for the main sections that should be included in the notebook. Please stick to this struture for your submitted notebook.\n",
    "\n",
    "Please focus on making your code clear, with appropriate variable names and whitespace. Include comments and markdown text to aid the readability of your code where relevant. See the specification and marking criteria in the associated specification to guide you when completing your implementation."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fe1144e1",
   "metadata": {},
   "source": [
    "## Setup and dependencies\n",
    "Please use this section to list and set up all your required libraries/dependencies and your plotting environment. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "11ab0507",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.metrics import f1_score, confusion_matrix, roc_curve, auc, RocCurveDisplay\n",
    "from keras_tuner.tuners import BayesianOptimization\n",
    "from tensorflow.keras.utils import to_categorical\n",
    "from tensorflow import keras\n",
    "import tensorflow as tf\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9bc35bce",
   "metadata": {},
   "source": [
    "## 1. Data loading, exploration, and preprocessing\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7495a12e-9b9d-48f8-9d2a-abbd01c5a594",
   "metadata": {},
   "source": [
    "Code to load the dataset is provided in the following cell. Please proceed with your data exploration and preprocessing in the remainder of this section."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a991e631",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load the dataset training and test sets as numpy arrays\n",
    "# assuming Assignment2Data folder is present in the same directory \n",
    "# as the notebook\n",
    "X_train = np.load('Assignment2Data/X_train.npy')\n",
    "y_train = np.load('Assignment2Data/y_train.npy')\n",
    "X_test = np.load('Assignment2Data/X_test.npy')\n",
    "y_test = np.load('Assignment2Data/y_test.npy')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "68c97ca0-15b8-4101-b6b5-b76431c3ca17",
   "metadata": {},
   "source": [
    "### Examples of preprocessed data\n",
    "Please print/display some examples of your preprocessed data here."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "2ed30e70-32f6-47ef-8a0e-873f14ef11f8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(50000, 32, 32, 3)"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(X_train[0].astype('uint8'))\n",
    "num_classes = len(np.unique(y_train))\n",
    "X_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "29d7a75d-6f27-4397-8ee7-83cdbc76457b",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train = X_train.astype('float32')\n",
    "X_test = X_test.astype('float32')\n",
    "\n",
    "#force the pixel values to have values in the normalized range of [0,1] ensuring that all\n",
    "#pixels contribute equally to the model\n",
    "X_train /= 255\n",
    "X_test /= 255\n",
    "\n",
    "#standardize the pixel values for each RGB color channels for model optimization\n",
    "#helping the gradient to converge faster\n",
    "#implying removing the effect of RGB values from the value of each color and\n",
    "#forcing each channel to have a near zero mean and unit variance \n",
    "mean = X_train.mean(axis=(0,1,2))\n",
    "std = X_train.std(axis=(0,1,2))\n",
    "\n",
    "for i in range(3): \n",
    "    X_train[..., i] = (X_train[..., i] - mean[i]) / std[i] \n",
    "    X_test[..., i] = (X_test[..., i] - mean[i]) / std[i]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c81bb2b0",
   "metadata": {},
   "source": [
    "## 2. Algorithm design and setup"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0c873320",
   "metadata": {},
   "source": [
    "### Algorithm of choice from first six weeks of course"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b895ee03",
   "metadata": {},
   "source": [
    "### Fully connected neural network"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "5d27673f-73f2-49a8-987a-749e060df78e",
   "metadata": {},
   "outputs": [],
   "source": [
    "def mlp_architecture():\n",
    "    model = keras.Sequential([\n",
    "        keras.layers.Flatten(input_shape=(32,32,3)),\n",
    "        keras.layers.Dense(1024, activation='relu'),\n",
    "        keras.layers.Dropout(0.3),\n",
    "        keras.layers.Dense(512, activation='relu'),\n",
    "        keras.layers.Dropout(0.3),\n",
    "        keras.layers.Dense(10, activation='softmax')\n",
    "    ])\n",
    "\n",
    "    model.compile(\n",
    "        optimizer=keras.optimizers.SGD(learning_rate=5e-2),\n",
    "        loss='sparse_categorical_crossentropy',\n",
    "        metrics=['accuracy']\n",
    "    )\n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "f4d2b753-35e3-407d-b1a8-204ec828031c",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Anaconda\\Lib\\site-packages\\keras\\src\\layers\\reshaping\\flatten.py:37: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(**kwargs)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/50\n",
      "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 11ms/step - accuracy: 0.3032 - loss: 2.0288 - val_accuracy: 0.3826 - val_loss: 1.6935\n",
      "Epoch 2/50\n",
      "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 10ms/step - accuracy: 0.4213 - loss: 1.6291 - val_accuracy: 0.4450 - val_loss: 1.5591\n",
      "Epoch 3/50\n",
      "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 11ms/step - accuracy: 0.4595 - loss: 1.5311 - val_accuracy: 0.4791 - val_loss: 1.4915\n",
      "Epoch 4/50\n",
      "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 11ms/step - accuracy: 0.4786 - loss: 1.4687 - val_accuracy: 0.4608 - val_loss: 1.5228\n",
      "Epoch 5/50\n",
      "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 10ms/step - accuracy: 0.5002 - loss: 1.4217 - val_accuracy: 0.4858 - val_loss: 1.4520\n",
      "Epoch 6/50\n",
      "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 10ms/step - accuracy: 0.5154 - loss: 1.3779 - val_accuracy: 0.4950 - val_loss: 1.4299\n",
      "Epoch 7/50\n",
      "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 10ms/step - accuracy: 0.5286 - loss: 1.3259 - val_accuracy: 0.4838 - val_loss: 1.4537\n",
      "Epoch 8/50\n",
      "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 11ms/step - accuracy: 0.5473 - loss: 1.2909 - val_accuracy: 0.5091 - val_loss: 1.4111\n",
      "Epoch 9/50\n",
      "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 10ms/step - accuracy: 0.5611 - loss: 1.2446 - val_accuracy: 0.5250 - val_loss: 1.3685\n",
      "Epoch 10/50\n",
      "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 11ms/step - accuracy: 0.5704 - loss: 1.2235 - val_accuracy: 0.5175 - val_loss: 1.3830\n",
      "Epoch 11/50\n",
      "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 10ms/step - accuracy: 0.5807 - loss: 1.1857 - val_accuracy: 0.5187 - val_loss: 1.3719\n",
      "Epoch 12/50\n",
      "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 11ms/step - accuracy: 0.5858 - loss: 1.1666 - val_accuracy: 0.5298 - val_loss: 1.3556\n",
      "Epoch 13/50\n",
      "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 11ms/step - accuracy: 0.5990 - loss: 1.1370 - val_accuracy: 0.5399 - val_loss: 1.3315\n",
      "Epoch 14/50\n",
      "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 11ms/step - accuracy: 0.6079 - loss: 1.1053 - val_accuracy: 0.5392 - val_loss: 1.3428\n",
      "Epoch 15/50\n",
      "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 10ms/step - accuracy: 0.6209 - loss: 1.0782 - val_accuracy: 0.5422 - val_loss: 1.3368\n",
      "Epoch 16/50\n",
      "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 11ms/step - accuracy: 0.6251 - loss: 1.0494 - val_accuracy: 0.5404 - val_loss: 1.3412\n",
      "Epoch 17/50\n",
      "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 10ms/step - accuracy: 0.6395 - loss: 1.0235 - val_accuracy: 0.5455 - val_loss: 1.3259\n",
      "Epoch 18/50\n",
      "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 10ms/step - accuracy: 0.6390 - loss: 1.0093 - val_accuracy: 0.5330 - val_loss: 1.3763\n",
      "Epoch 19/50\n",
      "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 11ms/step - accuracy: 0.6565 - loss: 0.9783 - val_accuracy: 0.5417 - val_loss: 1.3445\n",
      "Epoch 20/50\n",
      "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 11ms/step - accuracy: 0.6600 - loss: 0.9598 - val_accuracy: 0.5537 - val_loss: 1.3343\n",
      "Epoch 21/50\n",
      "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 10ms/step - accuracy: 0.6620 - loss: 0.9450 - val_accuracy: 0.5473 - val_loss: 1.3437\n",
      "Epoch 22/50\n",
      "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 11ms/step - accuracy: 0.6765 - loss: 0.9015 - val_accuracy: 0.5477 - val_loss: 1.3380\n",
      "Epoch 23/50\n",
      "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 10ms/step - accuracy: 0.6890 - loss: 0.8817 - val_accuracy: 0.5398 - val_loss: 1.3680\n",
      "Epoch 24/50\n",
      "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 11ms/step - accuracy: 0.6936 - loss: 0.8579 - val_accuracy: 0.5464 - val_loss: 1.3422\n",
      "Epoch 25/50\n",
      "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 10ms/step - accuracy: 0.7034 - loss: 0.8400 - val_accuracy: 0.5511 - val_loss: 1.3393\n",
      "Epoch 26/50\n",
      "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 10ms/step - accuracy: 0.7018 - loss: 0.8429 - val_accuracy: 0.5379 - val_loss: 1.3717\n",
      "Epoch 27/50\n",
      "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 10ms/step - accuracy: 0.7125 - loss: 0.8116 - val_accuracy: 0.5531 - val_loss: 1.3371\n",
      "Epoch 28/50\n",
      "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 11ms/step - accuracy: 0.7281 - loss: 0.7790 - val_accuracy: 0.5458 - val_loss: 1.3754\n",
      "Epoch 29/50\n",
      "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 11ms/step - accuracy: 0.7291 - loss: 0.7659 - val_accuracy: 0.5450 - val_loss: 1.3872\n",
      "Epoch 30/50\n",
      "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 10ms/step - accuracy: 0.7326 - loss: 0.7534 - val_accuracy: 0.5448 - val_loss: 1.3773\n",
      "Epoch 31/50\n",
      "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 11ms/step - accuracy: 0.7360 - loss: 0.7432 - val_accuracy: 0.5450 - val_loss: 1.3967\n",
      "Epoch 32/50\n",
      "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 11ms/step - accuracy: 0.7439 - loss: 0.7210 - val_accuracy: 0.5466 - val_loss: 1.3837\n",
      "Epoch 33/50\n",
      "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 11ms/step - accuracy: 0.7495 - loss: 0.7049 - val_accuracy: 0.5532 - val_loss: 1.3866\n",
      "Epoch 34/50\n",
      "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 10ms/step - accuracy: 0.7600 - loss: 0.6775 - val_accuracy: 0.5496 - val_loss: 1.4034\n",
      "Epoch 35/50\n",
      "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 11ms/step - accuracy: 0.7660 - loss: 0.6632 - val_accuracy: 0.5518 - val_loss: 1.3868\n",
      "Epoch 36/50\n",
      "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 11ms/step - accuracy: 0.7708 - loss: 0.6540 - val_accuracy: 0.5251 - val_loss: 1.5000\n",
      "Epoch 37/50\n",
      "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 11ms/step - accuracy: 0.7729 - loss: 0.6411 - val_accuracy: 0.5603 - val_loss: 1.3981\n",
      "Epoch 38/50\n",
      "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 11ms/step - accuracy: 0.7775 - loss: 0.6327 - val_accuracy: 0.5444 - val_loss: 1.4399\n",
      "Epoch 39/50\n",
      "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 10ms/step - accuracy: 0.7784 - loss: 0.6189 - val_accuracy: 0.5537 - val_loss: 1.4212\n",
      "Epoch 40/50\n",
      "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 11ms/step - accuracy: 0.7850 - loss: 0.6084 - val_accuracy: 0.5523 - val_loss: 1.4380\n",
      "Epoch 41/50\n",
      "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 11ms/step - accuracy: 0.7936 - loss: 0.5861 - val_accuracy: 0.5615 - val_loss: 1.4155\n",
      "Epoch 42/50\n",
      "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 11ms/step - accuracy: 0.8015 - loss: 0.5701 - val_accuracy: 0.5506 - val_loss: 1.4452\n",
      "Epoch 43/50\n",
      "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 10ms/step - accuracy: 0.8034 - loss: 0.5637 - val_accuracy: 0.5517 - val_loss: 1.4788\n",
      "Epoch 44/50\n",
      "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 11ms/step - accuracy: 0.8010 - loss: 0.5615 - val_accuracy: 0.5496 - val_loss: 1.5323\n",
      "Epoch 45/50\n",
      "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 11ms/step - accuracy: 0.8076 - loss: 0.5435 - val_accuracy: 0.5502 - val_loss: 1.4986\n",
      "Epoch 46/50\n",
      "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 11ms/step - accuracy: 0.8125 - loss: 0.5320 - val_accuracy: 0.5572 - val_loss: 1.5277\n",
      "Epoch 47/50\n",
      "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 11ms/step - accuracy: 0.8168 - loss: 0.5284 - val_accuracy: 0.5573 - val_loss: 1.4907\n",
      "Epoch 48/50\n",
      "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 11ms/step - accuracy: 0.8202 - loss: 0.5111 - val_accuracy: 0.5575 - val_loss: 1.4815\n",
      "Epoch 49/50\n",
      "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 11ms/step - accuracy: 0.8275 - loss: 0.4903 - val_accuracy: 0.5497 - val_loss: 1.5498\n",
      "Epoch 50/50\n",
      "\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 11ms/step - accuracy: 0.8229 - loss: 0.5043 - val_accuracy: 0.5591 - val_loss: 1.5198\n"
     ]
    }
   ],
   "source": [
    "model = mlp_architecture()\n",
    "history = model.fit(\n",
    "    X_train, y_train,\n",
    "    epochs = 50, \n",
    "    validation_split=0.2,\n",
    "    batch_size=128\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "9303a14e-2b3b-4b75-964e-e5b3bad131ee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Convert the history dictionary to a Pandas dataframe and extract the accuracies\n",
    "accuracies = pd.DataFrame(history.history)[['accuracy', 'val_accuracy']]\n",
    "\n",
    "# Plot the accuracies\n",
    "accuracies.plot(figsize=(8, 5))\n",
    "plt.grid(True)\n",
    "plt.gca()\n",
    "plt.xlabel('Epoch')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "63aa570f",
   "metadata": {},
   "source": [
    "### Convolutional neural network"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3b4911b1",
   "metadata": {},
   "source": [
    "## 3. Hyperparameter tuning"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "71085600",
   "metadata": {},
   "source": [
    "### Algorithm of choice from first six weeks of course"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "08d2d615",
   "metadata": {},
   "source": [
    "### Fully connected neural network"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "id": "286ecd24-ecc2-4489-9478-f23c5b295b9a",
   "metadata": {},
   "outputs": [],
   "source": [
    "def mlp_classifier(hp):\n",
    "    model = keras.Sequential()\n",
    "    model.add(keras.layers.Flatten(input_shape=(32,32,3)))\n",
    "\n",
    "    layer_cnt = hp.Choice('layer_cnt', values=[2,3,4,5,6])\n",
    "    dropout = hp.Float(\"dropout\", min_value=0.1, max_value=0.5, step=0.1)\n",
    "    for i in range(layer_cnt):\n",
    "        model.add(\n",
    "            keras.layers.Dense(\n",
    "                units=hp.Choice(f'node_{i}', values=[1024, 512, 256, 128]), \n",
    "                activation=hp.Choice(f'activation_{i}', values=['relu', 'tanh', 'sigmoid'])\n",
    "            )\n",
    "        )\n",
    "        model.add(keras.layers.Dropout(dropout))\n",
    "    model.add(keras.layers.Dense(10, activation='softmax'))\n",
    "    learning_rate = hp.Choice('learning_rate', values=[1e-2, 1e-3, 1e-4])\n",
    "    optimizer_name = hp.Choice('optimizer_type', values=['Adam', 'SGD'])\n",
    "    if optimizer_name == 'Adam':\n",
    "        opt = keras.optimizers.Adam(learning_rate=learning_rate)\n",
    "    elif optimizer_name == 'SGD':\n",
    "        opt = keras.optimizers.SGD(learning_rate=learning_rate)\n",
    "        \n",
    "    model.compile(optimizer=opt,\n",
    "                  loss='sparse_categorical_crossentropy',\n",
    "                  metrics=['accuracy']\n",
    "                 )\n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "id": "17459da4-21a3-4d38-a849-b8a40844d685",
   "metadata": {},
   "outputs": [],
   "source": [
    "tuner = BayesianOptimization(\n",
    "    hypermodel=mlp_classifier,\n",
    "    objective=\"val_accuracy\",\n",
    "    max_trials=10,\n",
    "    seed=0,\n",
    "    max_retries_per_trial=2,\n",
    "    max_consecutive_failed_trials=3,\n",
    "    overwrite=True\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "id": "7e3f3c38-c307-4aff-a824-e1398a8d5647",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Trial 10 Complete [00h 00m 43s]\n",
      "val_accuracy: 0.12060000002384186\n",
      "\n",
      "Best val_accuracy So Far: 0.5142999887466431\n",
      "Total elapsed time: 00h 12m 13s\n"
     ]
    }
   ],
   "source": [
    "tuner.search(\n",
    "    X_train, \n",
    "    y_train, \n",
    "    epochs=30, \n",
    "    validation_split=0.2,\n",
    "    batch_size=512\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "id": "70f918ef-686c-43c0-83db-fd155ad2bb7b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "===== Trial ID: 07 =====\n",
      "Hyperparameters: {'layer_cnt': 6, 'dropout': 0.30000000000000004, 'node_0': 1024, 'activation_0': 'relu', 'node_1': 512, 'activation_1': 'sigmoid', 'learning_rate': 0.001, 'optimizer_type': 'Adam', 'node_2': 128, 'activation_2': 'sigmoid', 'node_3': 512, 'activation_3': 'sigmoid', 'node_4': 1024, 'activation_4': 'relu', 'node_5': 512, 'activation_5': 'relu'}\n",
      "Epoch | loss         | accuracy     | val_loss     | val_accuracy\n",
      "-----------------------------------------------------------------\n",
      "1     |       1.0821 |       0.6129 |       1.4412 |       0.5143 | \n",
      "=====================================================================\n",
      "\n",
      "===== Trial ID: 02 =====\n",
      "Hyperparameters: {'layer_cnt': 6, 'dropout': 0.5, 'node_0': 1024, 'activation_0': 'sigmoid', 'node_1': 512, 'activation_1': 'tanh', 'learning_rate': 0.001, 'optimizer_type': 'Adam', 'node_2': 1024, 'activation_2': 'relu', 'node_3': 1024, 'activation_3': 'relu', 'node_4': 1024, 'activation_4': 'relu', 'node_5': 1024, 'activation_5': 'relu'}\n",
      "Epoch | loss         | accuracy     | val_loss     | val_accuracy\n",
      "-----------------------------------------------------------------\n",
      "1     |       1.5781 |       0.4445 |       1.5358 |       0.4641 | \n",
      "=====================================================================\n",
      "\n",
      "===== Trial ID: 08 =====\n",
      "Hyperparameters: {'layer_cnt': 3, 'dropout': 0.5, 'node_0': 256, 'activation_0': 'sigmoid', 'node_1': 128, 'activation_1': 'sigmoid', 'learning_rate': 0.001, 'optimizer_type': 'Adam', 'node_2': 128, 'activation_2': 'relu', 'node_3': 1024, 'activation_3': 'sigmoid', 'node_4': 1024, 'activation_4': 'relu', 'node_5': 512, 'activation_5': 'relu'}\n",
      "Epoch | loss         | accuracy     | val_loss     | val_accuracy\n",
      "-----------------------------------------------------------------\n",
      "1     |       1.5411 |       0.4518 |       1.5118 |       0.4617 | \n",
      "=====================================================================\n",
      "\n",
      "===== Trial ID: 00 =====\n",
      "Hyperparameters: {'layer_cnt': 2, 'dropout': 0.4, 'node_0': 128, 'activation_0': 'relu', 'node_1': 128, 'activation_1': 'sigmoid', 'learning_rate': 0.01, 'optimizer_type': 'Adam'}\n",
      "Epoch | loss         | accuracy     | val_loss     | val_accuracy\n",
      "-----------------------------------------------------------------\n",
      "1     |       1.8428 |       0.3307 |       1.7379 |       0.3750 | \n",
      "=====================================================================\n",
      "\n",
      "===== Trial ID: 01 =====\n",
      "Hyperparameters: {'layer_cnt': 3, 'dropout': 0.2, 'node_0': 1024, 'activation_0': 'tanh', 'node_1': 256, 'activation_1': 'relu', 'learning_rate': 0.0001, 'optimizer_type': 'SGD', 'node_2': 1024, 'activation_2': 'relu'}\n",
      "Epoch | loss         | accuracy     | val_loss     | val_accuracy\n",
      "-----------------------------------------------------------------\n",
      "1     |       2.2029 |       0.1939 |       2.1552 |       0.2299 | \n",
      "=====================================================================\n",
      "\n",
      "===== Trial ID: 04 =====\n",
      "Hyperparameters: {'layer_cnt': 4, 'dropout': 0.4, 'node_0': 1024, 'activation_0': 'relu', 'node_1': 256, 'activation_1': 'relu', 'learning_rate': 0.0001, 'optimizer_type': 'SGD', 'node_2': 256, 'activation_2': 'relu', 'node_3': 256, 'activation_3': 'tanh', 'node_4': 1024, 'activation_4': 'tanh', 'node_5': 256, 'activation_5': 'relu'}\n",
      "Epoch | loss         | accuracy     | val_loss     | val_accuracy\n",
      "-----------------------------------------------------------------\n",
      "1     |       2.5807 |       0.1241 |       2.1970 |       0.1951 | \n",
      "=====================================================================\n",
      "\n",
      "===== Trial ID: 09 =====\n",
      "Hyperparameters: {'layer_cnt': 4, 'dropout': 0.2, 'node_0': 256, 'activation_0': 'tanh', 'node_1': 128, 'activation_1': 'sigmoid', 'learning_rate': 0.0001, 'optimizer_type': 'SGD', 'node_2': 128, 'activation_2': 'relu', 'node_3': 1024, 'activation_3': 'sigmoid', 'node_4': 256, 'activation_4': 'tanh', 'node_5': 512, 'activation_5': 'tanh'}\n",
      "Epoch | loss         | accuracy     | val_loss     | val_accuracy\n",
      "-----------------------------------------------------------------\n",
      "1     |       2.3636 |       0.1025 |       2.3071 |       0.1206 | \n",
      "=====================================================================\n",
      "\n",
      "===== Trial ID: 05 =====\n",
      "Hyperparameters: {'layer_cnt': 6, 'dropout': 0.1, 'node_0': 512, 'activation_0': 'relu', 'node_1': 512, 'activation_1': 'relu', 'learning_rate': 0.0001, 'optimizer_type': 'SGD', 'node_2': 128, 'activation_2': 'tanh', 'node_3': 128, 'activation_3': 'relu', 'node_4': 256, 'activation_4': 'sigmoid', 'node_5': 1024, 'activation_5': 'relu'}\n",
      "Epoch | loss         | accuracy     | val_loss     | val_accuracy\n",
      "-----------------------------------------------------------------\n",
      "1     |       2.3122 |       0.1033 |       2.3020 |       0.1104 | \n",
      "=====================================================================\n",
      "\n",
      "===== Trial ID: 06 =====\n",
      "Hyperparameters: {'layer_cnt': 5, 'dropout': 0.30000000000000004, 'node_0': 128, 'activation_0': 'tanh', 'node_1': 1024, 'activation_1': 'sigmoid', 'learning_rate': 0.01, 'optimizer_type': 'Adam', 'node_2': 256, 'activation_2': 'relu', 'node_3': 1024, 'activation_3': 'tanh', 'node_4': 256, 'activation_4': 'sigmoid', 'node_5': 1024, 'activation_5': 'tanh'}\n",
      "Epoch | loss         | accuracy     | val_loss     | val_accuracy\n",
      "-----------------------------------------------------------------\n",
      "1     |       2.3225 |       0.0992 |       2.3297 |       0.1025 | \n",
      "=====================================================================\n",
      "\n",
      "===== Trial ID: 03 =====\n",
      "Hyperparameters: {'layer_cnt': 6, 'dropout': 0.2, 'node_0': 128, 'activation_0': 'relu', 'node_1': 128, 'activation_1': 'sigmoid', 'learning_rate': 0.0001, 'optimizer_type': 'SGD', 'node_2': 128, 'activation_2': 'sigmoid', 'node_3': 128, 'activation_3': 'sigmoid', 'node_4': 256, 'activation_4': 'relu', 'node_5': 256, 'activation_5': 'sigmoid'}\n",
      "Epoch | loss         | accuracy     | val_loss     | val_accuracy\n",
      "-----------------------------------------------------------------\n",
      "1     |       2.6382 |       0.1005 |       2.5749 |       0.0997 | \n",
      "=====================================================================\n"
     ]
    }
   ],
   "source": [
    "all_trials = tuner.oracle.get_best_trials(num_trials=10)\n",
    "\n",
    "METRICS_TO_EXTRACT = ['loss', 'accuracy', 'val_loss', 'val_accuracy'] \n",
    "\n",
    "for trial in all_trials:\n",
    "    trial_id = trial.trial_id\n",
    "    \n",
    "    print(f\"\\n===== Trial ID: {trial_id} =====\")\n",
    "    print(f\"Hyperparameters: {trial.hyperparameters.values}\")\n",
    "    \n",
    "    trial_history = {}\n",
    "    \n",
    "    for metric_name in METRICS_TO_EXTRACT:\n",
    "        try:\n",
    "            metric_observations = trial.metrics.get_history(metric_name)\n",
    "            metric_values = [v.value[0] for v in metric_observations]\n",
    "            \n",
    "            trial_history[metric_name] = metric_values\n",
    "            \n",
    "        except KeyError:\n",
    "            trial_history[metric_name] = [\"Metric not logged\"]\n",
    "\n",
    "\n",
    "    num_epochs = len(trial_history.get('loss', []))\n",
    "    \n",
    "    if num_epochs > 0:\n",
    "        header = \"Epoch | \" + \" | \".join(f\"{m:<12}\" for m in METRICS_TO_EXTRACT)\n",
    "        print(header)\n",
    "        print(\"-\" * len(header))\n",
    "        for epoch in range(num_epochs):\n",
    "            row = f\"{epoch + 1:<5} | \"\n",
    "            for metric_name in METRICS_TO_EXTRACT:\n",
    "                value = trial_history[metric_name][epoch]\n",
    "                row += f\"{value:12.4f} | \"\n",
    "            print(row)\n",
    "    else:\n",
    "        print(\"No epoch history found for this trial.\")\n",
    "        \n",
    "    print(\"=\" * (len(header) + 4))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "57c76117",
   "metadata": {},
   "source": [
    "### Convolutional neural network"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eead5c82",
   "metadata": {},
   "source": [
    "## 4. Final models\n",
    "In this section, please ensure to include cells to train each model with its best hyperparmater combination independently of the hyperparameter tuning cells, i.e. don't rely on the hyperparameter tuning cells having been run."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e1e56a6c",
   "metadata": {},
   "source": [
    "### Algorithm of choice from first six weeks of course"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fe676a86",
   "metadata": {},
   "source": [
    "### Fully connected neural network"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4ffd5d11-00de-47a1-b61c-38abe1fdce26",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f5d21cca-bc7a-41a8-af2b-116e1380d498",
   "metadata": {},
   "outputs": [],
   "source": [
    "hp = {\n",
    "    'layer_cnt': 6, \n",
    "    'dropout': 0.3, \n",
    "    'units': [1024,512,128,512,1024,512] \n",
    "    'activation': ['relu', 'sigmoid', 'sigmoid', 'sigmoid', 'relu', 'relu'], \n",
    "    'learning_rate': 0.001, \n",
    "    'optimizer_name': 'Adam'\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5db6af4b-9cc9-4a6f-b007-ef77b61e5550",
   "metadata": {},
   "outputs": [],
   "source": [
    "model = final_mlp_classifer(hp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b01f47ac-ab32-4174-acc6-d28aa9140aed",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = np.argmax(model.predict(X_test, verbose=0), axis=1)\n",
    "y_true = np.argmax(y_test, axis=1)\n",
    "f1 = f1_score(y_true, y_pred, average='macro')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c94c5c6b-1417-4786-9852-b9c4180bf4f6",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Convert the history dictionary to a Pandas dataframe and extract the accuracies\n",
    "accuracies = pd.DataFrame(history.history)[['accuracy', 'val_accuracy']]\n",
    "\n",
    "# Plot the accuracies\n",
    "accuracies.plot(figsize=(8, 5))\n",
    "plt.grid(True)\n",
    "plt.gca()\n",
    "plt.xlabel('Epoch')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "70f61309-8958-4649-b6e3-ffe72575711c",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_test_onehot = keras.utils.to_categorical(y_test, num_classes=len(list(np.unique(y_test))))\n",
    "\n",
    "plt.figure(figsize=(10,8))\n",
    "for i in range(len(list(np.unique(y_test)))):\n",
    "    fpr, tpr, _ = roc_curve(y_test_onehot[:, i], y_pred_probs[:, i])\n",
    "    roc_auc = auc(fpr, tpr)\n",
    "    plt.plot(fpr, tpr, label=f'Class {i} (AUC = {roc_auc:.2f})')\n",
    "\n",
    "plt.plot([0, 1], [0, 1], 'k--', label='Random')\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.ylabel('True Positive Rate')\n",
    "plt.title('ROC Curve - One-vs-Rest')\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "34c4ab78",
   "metadata": {},
   "source": [
    "### Convolutional neural network"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
